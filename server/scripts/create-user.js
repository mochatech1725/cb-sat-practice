import { Database } from '../database/init.js';
import dotenv from 'dotenv';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Load environment variables from project root
dotenv.config({ path: join(__dirname, '../../.env.dev') });

function printUsage() {
    console.log('\nUsage: npm run user:create -- --first-name=<firstName> --last-name=<lastName>');
    console.log('\nExample:');
    console.log('  npm run user:create -- --first-name=John --last-name=Doe\n');
    console.log('Options:');
    console.log('  --first-name=<name>    First name of the user (required)');
    console.log('  --last-name=<name>     Last name of the user (required)');
    console.log('  --help                 Show this help message\n');
    console.log('Note: User ID will be automatically generated as a UUID\n');
}

async function createUser() {
    const db = new Database();
    
    try {
        // Parse command line arguments
        const args = process.argv.slice(2);
        
        // Check for help flag
        if (args.includes('--help') || args.includes('-h')) {
            printUsage();
            process.exit(0);
        }
        
        // Extract first-name and last-name
        let firstName = '';
        let lastName = '';
        
        args.forEach(arg => {
            if (arg.startsWith('--first-name=')) {
                firstName = arg.split('=')[1];
            } else if (arg.startsWith('--last-name=')) {
                lastName = arg.split('=')[1];
            }
        });
        
        // Validate required fields
        if (!firstName || !lastName) {
            console.error('\n✗ Error: Both --first-name and --last-name are required\n');
            printUsage();
            process.exit(1);
        }
        
        console.log('\n=== Create New User ===\n');
        
        // Initialize database
        await db.init();
        
        // Create user (user_id will be auto-generated by database)
        const result = await db.adapter.execute(
            'INSERT INTO users (first_name, last_name) VALUES (?, ?)',
            [firstName, lastName]
        );
        
        // Fetch the created user to get the auto-generated user_id
        const createdUser = await db.adapter.getOne(
            'SELECT user_id, first_name, last_name FROM users WHERE first_name = ? AND last_name = ? ORDER BY created_at DESC LIMIT 1',
            [firstName, lastName]
        );
        
        console.log('✓ User created successfully!');
        console.log(`  User ID: ${createdUser.user_id}`);
        console.log(`  First Name: ${createdUser.first_name}`);
        console.log(`  Last Name: ${createdUser.last_name}\n`);
        
    } catch (error) {
        console.error('\n✗ Error creating user:', error.message);
        process.exit(1);
    } finally {
        await db.close();
    }
}

// Run the script
createUser();

